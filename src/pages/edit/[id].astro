---
import { db, Posts, eq } from 'astro:db';
import { actions } from 'astro:actions';
import Layout from '../../layouts/Layout.astro';

export const prerender = false; // necesario para acciones y par√°metros din√°micos

const id = Number(Astro.params.id);

// Verificar que el ID es v√°lido
if (Number.isNaN(id)) {
  return Astro.redirect('/');
}

// Obtener el post a editar
const post = await db.select().from(Posts).where(eq(Posts.id, id)).get();

// Si el post no existe, redirigir al inicio
if (!post) {
  return Astro.redirect('/');
}

// Manejar el resultado de la acci√≥n de actualizaci√≥n
const result = Astro.getActionResult(actions.updatePost);
if (result && !result.error) {
  // Si se actualiz√≥ correctamente, redirigir al inicio
  return Astro.redirect('/');
}
---

<Layout title={`Editar: ${post.title}`}>
  <div class="card">
    <div style="display: flex; align-items: center; gap: 1rem; margin-bottom: 2rem;">
      <a href="/" class="btn btn-secondary">
        ‚Üê Volver
      </a>
      <h1 style="margin: 0; color: var(--text);">‚úèÔ∏è Editar Post</h1>
    </div>
    
    {result?.error && (
      <div class="alert alert-error">
        ‚ùå Error actualizando el post. Por favor, int√©ntalo de nuevo.
      </div>
    )}
    
    <form method="POST" action={actions.updatePost} class="post-form" id="editForm">
      <input type="hidden" name="id" value={post.id} />
      
      <div class="form-group">
        <label for="title" class="form-label">üìù T√≠tulo del Post</label>
        <input 
          id="title"
          name="title" 
          type="text"
          class="form-input"
          value={post.title}
          required 
        />
      </div>
      
      <div class="form-group">
        <label for="content" class="form-label">üìÑ Contenido</label>
        <textarea 
          id="content"
          name="content" 
          class="form-textarea"
          rows="8"
          required
        >{post.content}</textarea>
      </div>
      
      <div style="display: flex; gap: 1rem; justify-content: flex-end;">
        <a href={`/posts/${post.id}`} class="btn btn-secondary">Ver Post</a>
        <a href="/" class="btn btn-secondary">Cancelar</a>
        <button type="button" class="btn btn-primary" id="saveBtn">
          üíæ Guardar Cambios
        </button>
      </div>
    </form>
  </div>

  <!-- Modal de confirmaci√≥n para guardar cambios -->
  <div id="saveModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>üíæ Confirmar cambios</h3>
      </div>
      <div class="modal-body">
        <p>¬øEst√°s seguro de que quieres guardar los cambios en este post?</p>
        <p class="info-text">üìù Los cambios se aplicar√°n inmediatamente.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" id="cancelSave">Cancelar</button>
        <button type="button" class="btn btn-primary" id="confirmSave">S√≠, guardar cambios</button>
      </div>
    </div>
  </div>

  <style>
    /* Estilos completos para la p√°gina de editar post */
    .btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      text-decoration: none;
      font-weight: 500;
      font-size: 0.875rem;
      transition: all 0.2s ease;
      cursor: pointer;
      border: none;
      font-family: inherit;
    }

    .btn-primary {
      background: var(--primary, #6366f1);
      color: white;
    }

    .btn-primary:hover {
      background: var(--primary-dark, #4f46e5);
      transform: translateY(-1px);
      box-shadow: var(--shadow-lg, 0 10px 15px -3px rgb(0 0 0 / 0.1));
    }

    .btn-secondary {
      background: var(--secondary, #f1f5f9);
      color: var(--text, #1e293b);
      border: 1px solid var(--border, #e2e8f0);
    }

    .btn-secondary:hover {
      background: #e2e8f0;
      transform: translateY(-1px);
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
      color: var(--text, #1e293b);
      font-size: 1rem;
    }

    .form-input, .form-textarea {
      width: 100%;
      padding: 0.75rem 1rem;
      border: 2px solid var(--border, #e2e8f0);
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.2s ease;
      font-family: inherit;
      background: var(--bg, #ffffff);
    }

    .form-input:focus, .form-textarea:focus {
      outline: none;
      border-color: var(--primary, #6366f1);
      box-shadow: 0 0 0 3px rgb(99 102 241 / 0.1);
      transform: translateY(-1px);
    }

    .form-textarea {
      resize: vertical;
      min-height: 120px;
      font-family: inherit;
      line-height: 1.6;
    }

    .alert {
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 1rem;
      font-weight: 500;
    }

    .alert-error {
      background: #fef2f2;
      color: #991b1b;
      border: 1px solid #fecaca;
    }

    .post-form {
      max-width: 600px;
    }

    .card {
      background: var(--bg, #ffffff);
      border-radius: 16px;
      padding: 2rem;
      box-shadow: var(--shadow-lg, 0 10px 15px -3px rgb(0 0 0 / 0.1));
      border: 1px solid var(--border, #e2e8f0);
    }

    /* Estilos del modal */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(4px);
    }

    .modal.show {
      display: flex;
      align-items: center;
      justify-content: center;
      animation: fadeIn 0.2s ease;
    }

    .modal-content {
      background: white;
      border-radius: 16px;
      max-width: 400px;
      width: 90%;
      box-shadow: var(--shadow-lg, 0 10px 15px -3px rgb(0 0 0 / 0.1));
      animation: slideIn 0.3s ease;
    }

    .modal-header {
      padding: 1.5rem 1.5rem 1rem 1.5rem;
      border-bottom: 1px solid var(--border, #e2e8f0);
    }

    .modal-header h3 {
      margin: 0;
      color: var(--text, #1e293b);
      font-size: 1.25rem;
    }

    .modal-body {
      padding: 1.5rem;
    }

    .modal-body p {
      margin: 0 0 1rem 0;
      color: var(--text, #1e293b);
      line-height: 1.5;
    }

    .info-text {
      color: var(--primary, #6366f1);
      font-size: 0.875rem;
      font-weight: 500;
    }

    .modal-footer {
      padding: 1rem 1.5rem 1.5rem 1.5rem;
      display: flex;
      gap: 1rem;
      justify-content: flex-end;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    @keyframes slideIn {
      from { 
        opacity: 0;
        transform: translateY(-20px) scale(0.95);
      }
      to { 
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const modal = document.getElementById('saveModal');
      const editForm = document.getElementById('editForm') as HTMLFormElement;
      const saveBtn = document.getElementById('saveBtn');
      const cancelBtn = document.getElementById('cancelSave');
      const confirmBtn = document.getElementById('confirmSave');

      // Manejar click en bot√≥n guardar
      saveBtn?.addEventListener('click', function(e) {
        e.preventDefault();
        modal?.classList.add('show');
      });

      // Manejar cancelaci√≥n
      cancelBtn?.addEventListener('click', function() {
        modal?.classList.remove('show');
      });

      // Manejar confirmaci√≥n
      confirmBtn?.addEventListener('click', function() {
        if (editForm) {
          editForm.submit();
        }
      });

      // Cerrar modal al hacer click fuera
      modal?.addEventListener('click', function(e) {
        if (e.target === modal) {
          modal.classList.remove('show');
        }
      });

      // Cerrar modal con Escape
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && modal?.classList.contains('show')) {
          modal.classList.remove('show');
        }
      });
    });
  </script>
</Layout>